// Code generated by tygo. DO NOT EDIT.

//////////
// source: props.go

/**
 * plan property keys
 */
export const NODE_TYPE_PROP = "Node Type";
export const ACTUAL_ROWS_PROP = "Actual Rows";
export const PLAN_ROWS_PROP = "Plan Rows";
export const ACTUAL_TOTAL_TIME_PROP = "Actual Total Time";
export const ACTUAL_LOOPS_PROP = "Actual Loops";
export const TOTAL_COST_PROP = "Total Cost";
export const PLANS_PROP = "Plans";
export const STARTUP_COST = "Startup Cost";
export const PLAN_WIDTH = "Plan Width";
export const ACTUAL_STARTUP_TIME_PROP = "Actual Startup Time";
export const RELATION_NAME_PROP = "Relation Name";
export const SCHEMA_PROP = "Schema";
export const ALIAS_PROP = "Alias";
export const GROUP_KEY_PROP = "Group Key";
export const SORT_KEY_PROP = "Sort Key";
export const JOIN_TYPE_PROP = "Join Type";
export const INDEX_NAME_PROP = "Index Name";
export const HASH_CONDITION_PROP = "Hash Cond";
export const EXECUTION_TIME_PROP = "Execution Time";
export const TOTAL_RUNTIME = "Total Runtime";
/**
 * computed
 */
export const COMPUTED_TAGS_PROP = "*Tags";
export const COSTLIEST_NODE_PROP = "*Costliest Node (by cost)";
export const LARGEST_NODE_PROP = "*Largest Node (by rows)";
export const SLOWEST_NODE_PROP = "*Slowest Node (by duration)";
export const MAXIMUM_COSTS_PROP = "*Most Expensive Node (cost)";
export const MAXIMUM_ROWS_PROP = "*Largest Node (rows)";
export const MAXIMUM_DURATION_PROP = "*Slowest Node (time)";
export const ACTUAL_DURATION_PROP = "*Actual Duration";
export const ACTUAL_COST_PROP = "*Actual Cost";
export const PLANNER_ESTIMATE_FACTOR = "*Planner Row Estimate Factor";
export const PLANNER_ESTIMATE_DIRECTION = "*Planner Row Estimate Direction";
export const PARENT_RELATIONSHIP = "Parent Relationship";
export const SUBPLAN_NAME = "Subplan Name";
export const CTE_SCAN_PROP = "CTE Scan";
export const CTE_NAME_PROP = "CTE Name";
export const ARRAY_INDEX_KEY = "arrayIndex";
export const RELATION_NAME = "Relation Name";
export const SCHEMA = "Schema";
export const ALIAS = "Alias";
export const GROUP_KEY = "Group Key";
export const SORT_KEY = "Sort Key";
export const SORT_METHOD = "Sort Method";
export const SORT_SPACE_TYPE = "Sort Space Type";
export const SORT_SPACE_USED = "Sort Space Used";
export const JOIN_TYPE = "Join Type";
export const INDEX_NAME = "Index Name";
export const HASH_CONDITION = "Hash Cond";
export const PARALLEL_AWARE = "Parallel Aware";
export const WORKERS = "Workers";
export const WORKERS_PLANNED = "Workers Planned";
export const WORKERS_LAUNCHED = "Workers Launched";
export const SHARED_HIT_BLOCKS = "Shared Hit Blocks";
export const SHARED_READ_BLOCKS = "Shared Read Blocks";
export const SHARED_DIRTIED_BLOCKS = "Shared Dirtied Blocks";
export const SHARED_WRITTEN_BLOCKS = "Shared Written Blocks";
export const TEMP_READ_BLOCKS = "Temp Read Blocks";
export const TEMP_WRITTEN_BLOCKS = "Temp Written Blocks";
export const LOCAL_HIT_BLOCKS = "Local Hit Blocks";
export const LOCAL_READ_BLOCKS = "Local Read Blocks";
export const LOCAL_DIRTIED_BLOCKS = "Local Dirtied Blocks";
export const LOCAL_WRITTEN_BLOCKS = "Local Written Blocks";
export const IO_READ_TIME = "I/O Read Time";
export const IO_WRITE_TIME = "I/O Write Time";
export const OUTPUT = "Output";
export const HEAP_FETCHES = "Heap Fetches";
export const WAL_RECORDS = "WAL Records";
export const WAL_BYTES = "WAL Bytes";
export const WAL_FPI = "WAL FPI";
export const FULL_SORT_GROUPS = "Full-sort Groups";
export const PRE_SORTED_GROUPS = "Pre-sorted Groups";
export const PRESORTED_KEY = "Presorted Key";
/**
 * computed by pev
 */
export const NODE_ID = "nodeId";
export const EXCLUSIVE_DURATION = "*Duration (exclusive)";
export const EXCLUSIVE_COST = "*Cost (exclusive)";
export const ACTUAL_ROWS_REVISED = "*Actual Rows Revised";
export const PLAN_ROWS_REVISED = "*Plan Rows Revised";
export const ROWS_REMOVED_BY_FILTER = "Rows Removed by Filter";
export const ROWS_REMOVED_BY_JOIN_FILTER = "Rows Removed by Join Filter";
export const FILTER = "Filter";
export const EXCLUSIVE_SHARED_HIT_BLOCKS = "*Shared Hit Blocks (exclusive)";
export const EXCLUSIVE_SHARED_READ_BLOCKS = "*Shared Read Blocks (exclusive)";
export const EXCLUSIVE_SHARED_DIRTIED_BLOCKS = "*Shared Dirtied Blocks (exclusive)";
export const EXCLUSIVE_SHARED_WRITTEN_BLOCKS = "*Shared Written Blocks (exclusive)";
export const EXCLUSIVE_TEMP_READ_BLOCKS = "*Temp Read Blocks (exclusive)";
export const EXCLUSIVE_TEMP_WRITTEN_BLOCKS = "*Temp Written Blocks (exclusive)";
export const EXCLUSIVE_LOCAL_HIT_BLOCKS = "*Local Hit Blocks (exclusive)";
export const EXCLUSIVE_LOCAL_READ_BLOCKS = "*Local Read Blocks (exclusive)";
export const EXCLUSIVE_LOCAL_DIRTIED_BLOCKS = "*Local Dirtied Blocks (exclusive)";
export const EXCLUSIVE_LOCAL_WRITTEN_BLOCKS = "*Local Written Blocks (exclusive)";
export const EXCLUSIVE_IO_READ_TIME = "*I/O Read Time (exclusive)";
export const EXCLUSIVE_IO_WRITE_TIME = "*I/O Write Time (exclusive)";
export const AVERAGE_IO_READ_TIME = "*I/O Read Speed (exclusive)";
export const AVERAGE_IO_WRITE_TIME = "*I/O Write Speed (exclusive)";
export const WORKERS_PLANNED_BY_GATHER = "*Workers Planned By Gather";
export const CTE_SCAN = "CTE Scan";
export const CTE_NAME = "CTE Name";
export const CTES = "CTEs";
export const IS_CTE_ROOT = "*Is CTE Root";
export const CTE_SUBPLAN_OF = "*CTE Subplan Of";
export const FUNCTION_NAME = "Function Name";
export const PEV_PLAN_TAG = "plan_";
export const EstimateDirectionOver = "over";
export const EstimateDirectionUnder = "under";
export const EstimateDirectionNone = "none";
/**
 * Operations
 */
export const SEQUENTIAL_SCAN = "Seq Scan";
export const INDEX_SCAN = "Index Scan";
export const INDEX_ONLY_SCAN = "Index Only Scan";
export const BITMAP_INDEX_SCAN = "Bitmap Index Scan";
export const BITMAP_HEAP_SCAN = "Bitmap Heap Scan";
export const HASH = "Hash";
export const HASH_JOIN = "Hash Join";
export const HASH_AGGREGATE = "HashAggregate";
export const SORT = "Sort";
export const FUNCTION_SCAN = "Function Scan";
export const X_POSITION_FACTOR = "*X Position Factor";
export const Y_POSITION_FACTOR = "*Y Position Factor";

//////////
// source: types.go

export type Node = { [key: string]: any};
/**
 * StatsFromPlan Statistic can be found in different forms
 */
export interface StatsFromPlan {
  plan: {
    'Execution Time': number /* float64 */;
    'Planning Time': number /* float64 */;
  };
  'Execution Time': number /* float64 */;
  'Planning Time': number /* float64 */;
}
export interface Stats {
  execution_time: number /* float64 */;
  planning_time: number /* float64 */;
  max_rows: number /* float64 */;
}
export type Plans = {
    Plan: { [key: string]: any};
  }[];
export interface Explained {
  summary: PlanRow[];
  stats: Stats;
}
export interface Position {
  x_factor: number /* float64 */;
  y_factor: number /* float64 */;
}
export interface NodeSummary {
  operation: string;
  scope: string;
  level: number /* int */;
  costs: string;
  buffers: string;
  relation: string;
  filters: string;
  index: string;
}
export interface Rows {
  total: number /* float64 */;
  removed: number /* float64 */;
  filters: string;
  estimation_factor: number /* float64 */;
  estimation_direction: string;
}
export interface Buffers {
  reads: number /* float64 */;
  written: number /* float64 */;
  hits: number /* float64 */;
}
export interface PlanRow {
  node_id: string;
  node_parent_id: string;
  level: number /* int */;
  branch: string;
  node: NodeSummary;
  inclusive: number /* float64 */;
  loops: number /* float64 */;
  rows: Rows;
  exclusive: number /* float64 */;
  execution_time: number /* float64 */;
  buffers: Buffers;
  sub_plan_of: string;
  position: Position;
}
export interface Operation {
  scope: string;
  index: string;
  filter: string;
}
